/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2017-10-13 14:14:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class register_005fcheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


        //定义数据库驱动程序
        public static final String DBDRIVER = "org.gjt.mm.mysql.Driver";
        //数据库连接地址
        public static final String DBURL = "jdbc:mysql://localhost:3306/IP_POOL?characterEncoding=utf-8";
        public static final String DBUSER = "root";      //数据库连接用户
        public static final String DBPASS = "123456";    //数据库连接密码
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <title>欢迎光临-www.flowingsun.com</title>\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("  ");

    request.setCharacterEncoding("UTF-8");
  
      out.write("\n");
      out.write("  <center>\n");
      out.write("    <h1>欢迎光临-www.flowingsun.com</h1>\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        Connection conn = null;            //声明数据库连接对象
        PreparedStatement pstmt = null;    //数据库预处理操作
        PreparedStatement pstmt2 = null;    //数据库预处理操作
        ResultSet rs = null;               //声明数据库结果集
        boolean flag = false;              //定义标志位
    
      out.write("\n");
      out.write("    ");

    try{//JDBC操作会抛出异常，使用try...catch处理
    
      out.write("\n");
      out.write("    ");

        Class.forName(DBDRIVER);           //加载驱动程序
        conn = DriverManager.getConnection(DBURL,DBUSER,DBPASS); //取得数据库连接
        //编写要使用的SQL语句，验证用户id和密码，如果正确，则取出真实姓名
        String check_sql = "SELECT email FROM Register WHERE name=? AND email=? AND password=?";
        pstmt = conn.prepareStatement(check_sql); //实例化数据库操作对象
        pstmt.setString(1,request.getParameter("username"));       //设置查询所需要的内容
        pstmt.setString(2,request.getParameter("email"));       //设置查询所需要的内容
        pstmt.setString(3,request.getParameter("password"));       //设置查询所需要的内容
        rs = pstmt.executeQuery();           //执行查询

        if(rs.next()){                       //如果可以查询到，则表示用户存在（已在服务器注册过）
          flag = true;                       //修改标志位为true
        }
    
      out.write("\n");
      out.write("    ");

    }catch(Exception e){e.printStackTrace();}
    finally{
    
      out.write("\n");
      out.write("    ");

          if(flag){ //表示用户已经注册过，则跳转到修改密码页
    
      out.write("\n");
      out.write("                   ");
      if (true) {
        _jspx_page_context.forward("repeated_register.html");
        return;
      }
      out.write("\n");
      out.write("    ");

          }else{    //表示用户未注册过，try语句提交服务器注册
             try{  //提交注册至服务器，catch异常则跳转到注册失败页面。
                 String insert_sql = "INSERT INTO Register(telephone,email,name,password) VALUES(?,?,?,?)";
                 pstmt2 = conn.prepareStatement(insert_sql);
                 pstmt2.setString(1,request.getParameter("telephone"));      //设置查询所需要的内容
                 pstmt2.setString(2,request.getParameter("email"));          //设置查询所需要的内容
                 pstmt2.setString(3,request.getParameter("username"));       //设置查询所需要的内容
                 pstmt2.setString(4,request.getParameter("password"));       //设置查询所需要的内容
                 int rs2 = pstmt2.executeUpdate();
                 if(rs2>=1){
    
      out.write("           //如果可以查询到，则表示用户注册到数据库成功,跳转到注册成功页\n");
      out.write("                  ");
      if (true) {
        _jspx_page_context.forward("register_success.jsp");
        return;
      }
      out.write("\n");
      out.write("    ");

                 }else{
    
      out.write("           //否则，注册到数据库失败，跳转到注册失败页\n");
      out.write("                   ");
      if (true) {
        _jspx_page_context.forward("register_failed.html");
        return;
      }
      out.write("\n");
      out.write("    ");

                 }
             }catch(Exception e){
    
      out.write("           //注册失败，跳转至注册失败页面。\n");
      out.write("                 ");
      if (true) {
        _jspx_page_context.forward("register_failed.html");
        return;
      }
      out.write("\n");
      out.write("    ");

             }
             finally{ //关闭数据库连接的操作会抛出异常，故使用try...catch处理
               try{                                //关闭操作会抛出异常，使用try...catch处理
                    rs.close();                    //关闭查询对象
                    pstmt.close();                 //关闭操作对象
                    conn.close();                  //关闭数据库连接
               }catch(Exception e){e.printStackTrace();}
             }
           }
        }
    
      out.write("\n");
      out.write("  </center>\n");
      out.write("  </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
